{"version":3,"sources":["sass/_typography.scss","sass/_legend.scss","sass/_colors.scss","sass/_util.scss","sass/_marker.scss","sass/index.scss","sass/_controls.scss"],"names":[],"mappings":"AACA,WACE,kBAAA,CACA,iBAAA,CACA,eAAA,CACA,wMCEF,MACE,2BAGF,YACE,wBCRuB,CDSvB,aCLuB,CDOvB,mBAAA,CAGA,YAAA,CACA,qBAAA,CACA,kBAAA,CAEA,gBAAA,CErBA,sCF0BA,mBAEE,MAAA,CACA,YAAA,CDrBF,oCAAA,CAWA,eAAA,CACA,cAAA,CCYE,gBAAA,CACA,gBAIF,eAGE,MAAA,CAGA,aAAA,CACA,UAAA,CAIA,sBAKF,8BAZE,QAAA,CAMA,YAAA,CAEA,oBAIF,eAEE,eAAA,CAGA,aAAA,CACA,YASF,wBAEE,MAAA,CAGA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,kBAAA,CAEA,eAGF,0BAEE,aAAA,CACA,YAjFgB,CAoFhB,wBCnFqB,CDoFrB,iDAIF,yCACE,kCAGF,wCACE,kCGxFJ,MACE,2BAGF,YACE,YAZK,CAaL,aAbK,CAcL,oBAdK,CAgBL,eAAA,CAEA,UAAA,CAEA,mCAEA,oCACE,WAGF,mBACE,UAAA,CACA,WAAA,CACA,oBA7BG,CAiCH,0BAAA,CAAA,4CAAA,CAEA,kBAEA,yBACE,UAAA,CACA,iBAAA,CDjCJ,SCJW,CDKX,WCLW,CDMX,YCNW,CDOX,UCPW,CAwCP,oBA1CC,CA4CD,wBF1CmB,CE2CnB,gDAAA,CAEA,iGAMF,8DD/CF,UCgDwB,CD/CxB,YC+CwB,CD9CxB,aC8CwB,CD7CxB,YENF,EACE,sBAGF,UAIE,aHNuB,CGQvB,yBAGF,eARE,WAAA,CLFA,oCAAA,CAKA,eAAA,CACA,gBKIF,KAEE,kBAIA,uBACE,iBAAA,CACA,OAAA,CACA,QAAA,CACA,+BAIF,oCACE,aC9BF,0BACE,mBAAA,CACA,yBAGA,sCHRF,sCGYE,iCACE,QAAA,CACA,WAAA,CAEA,aJTmB,CIUnB,yBAGA,wCACE,+BAGF,8EACE,yBAKJ,uCACE,8BAEF,sCACE,8BAMJ,0BAIE,0BAAA,CHxCF,sCGiDA,qDAZE,wBJtCqB,CIuCrB,aJnCqB,CIuCrB,gBAOF,2BAKE,4BAAA,CH1DF,sCG8DE,6BACE,cAMJ,qBAME,+CAGA,6BACE,aJxEmB,CIyEnB,wBJ7EmB,CI8EnB,mBAAA,CACA,cAiBA,uKACE,4BADF,gLACE,yBADF,qDACE,2BADF,sDACE","file":"sass.2ceaceb4.css","sourceRoot":"../src","sourcesContent":["/* Define the \"system\" font family */\n@font-face {\n  font-family: system;\n  font-style: normal;\n  font-weight: 300;\n  src: local(\".SFNSText-Light\"), local(\".HelveticaNeueDeskInterface-Light\"), local(\".LucidaGrandeUI\"), local(\"Ubuntu Light\"), local(\"Segoe UI Light\"), local(\"Roboto-Light\"), local(\"DroidSans\"), local(\"Tahoma\");\n}\n\n@mixin font-family {\n  font-family: \"Oswald\", \"system\", sans-serif;\n}\n\n@mixin body {\n  @include font-family();\n  font-weight: 400;\n  font-size: 0.9rem;\n}\n\n@mixin heading {\n  @include font-family();\n  font-weight: 300;\n  font-size: 1rem;\n}\n","@use \"colors\";\n@use \"util\";\n@use \"typography\";\n\n$year-stripe-width: 0.75rem;\n\n// CSS variables are set by javascript for each stripe to colour them dynamically.\n:root {\n  --map-legend-color: #{colors.$salmon};\n}\n\n.map-legend {\n  background-color: colors.$background;\n  color: colors.$text;\n\n  border-radius: 0.5rem;\n\n  // This is a flex container because it makes layout easier.\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  min-height: 13rem;\n\n  @include util.box-shadow();\n\n  // Style the legend's title.\n  &__title {\n    // The title shouldn't grow vertically, so set flex to 0.\n    flex: 0;\n    margin: 0.5rem;\n\n    @include typography.heading();\n    font-size: 1.4rem;\n    line-height: 1.4;\n  }\n\n  // Style the actual \"legend block\" list.\n  ul {\n    // The \"legend block\" list should grow vertically to fill as much space as\n    // as needed.\n    flex: 1;\n    margin: 0;\n\n    padding: 0.5rem;\n    width: 100%;\n\n    // This is a flex container too so each \"legend block\" is always the same height.\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n  }\n\n  // Style each \"legend block\".\n  li {\n    // hide the bullet:\n    list-style: none;\n\n    // Grow as much as possible, don't shrink, and base height on height property.\n    flex: 1 0 auto;\n    height: 2rem;\n\n    margin: 0;\n\n    // Display flex so we can position the text and the stripe nicely.\n    display: flex;\n    align-items: stretch;\n  }\n\n  &__year--text {\n    // Grow as much as possible.\n    flex: 1;\n\n    // Display flex to center text vertically & horizontally.\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n\n    padding: 0 1rem;\n  }\n\n  &__year--stripe {\n    // Don't grow or shrink. Just be a fixed width.\n    flex: 0 0 auto;\n    width: $year-stripe-width;\n\n    // This CSS var is set by javascript dynamically.\n    background-color: colors.$salmon;\n    background-color: var(--map-legend-color, colors.$salmon);\n  }\n\n  // Give the first and last stripe segments curved corners.\n  li:first-child &__year--stripe {\n    border-radius: $year-stripe-width/2 $year-stripe-width/2 0 0;\n  }\n\n  li:last-child &__year--stripe {\n    border-radius: 0 0 $year-stripe-width/2 $year-stripe-width/2;\n  }\n}\n","@use \"sass:color\";\n\n// I generated a colourscheme using Pantone colours on Adobe Color. The result\n// is below.\n$Map-Color-Scheme-1-hex: #3B3D3F;\n$Map-Color-Scheme-2-hex: #FF8573;\n$Map-Color-Scheme-3-hex: #FEB237;\n$Map-Color-Scheme-4-hex: #288A7C;\n$Map-Color-Scheme-5-hex: #D6DED9;\n\n// Nicer color definitions:\n$black: $Map-Color-Scheme-1-hex;\n$salmon: $Map-Color-Scheme-2-hex;\n$yellow: $Map-Color-Scheme-3-hex;\n$teal: $Map-Color-Scheme-4-hex;\n$teal--lighter: color.scale($teal, $lightness: 20%);\n$white: $Map-Color-Scheme-5-hex;\n\n// Some theming colours:\n$background: $black;\n$background--darker: color.scale($background, $lightness: -30%);\n$text: $white;\n","@mixin box-shadow {\n  box-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);\n}\n\n@mixin box-shadow--lower {\n  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n}\n\n@mixin inset($top, $right: $top, $bottom: $top, $left: $right) {\n  top: $top;\n  right: $right;\n  bottom: $bottom;\n  left: $left;\n}\n","@use \"colors\";\n@use \"util\";\n\n$size: 2.2rem;\n$border-size: 0.3rem;\n$inside-gap: 0.4rem;\n$transition: 0.1s ease-in-out;\n\n// This gets set dynamically by JavaScript for the year the the item was purchased\n// in.\n:root {\n  --map-marker-color: #{colors.$salmon};\n}\n\n.map-marker {\n  width: $size;\n  height: $size;\n  border-radius: $size;\n\n  overflow: hidden;\n\n  opacity: 80%;\n\n  transition: opacity $transition;\n\n  &:hover, &:focus {\n    opacity: 100%;\n  }\n\n  &__inner {\n    width: 100%;\n    height: 100%;\n    border-radius: $size;\n\n    border: $border-size solid;\n    border-color: colors.$salmon;\n    border-color: var(--map-marker-color, colors.$salmon);\n\n    position: relative;\n\n    &::after {\n      content: \"\";\n      position: absolute;\n      @include util.inset($inside-gap);\n\n      border-radius: $size;\n\n      background-color: colors.$salmon;\n      background-color: var(--map-marker-color, colors.$salmon);\n\n      transition: top $transition,\n        right $transition,\n        bottom $transition,\n        left $transition;\n    }\n\n    &:hover::after, &:focus::after {\n      @include util.inset(-$border-size);\n    }\n  }\n}\n","@use \"typography\";\n@use \"colors\";\n@use \"controls\";\n@use \"legend\";\n@use \"marker\";\n\n* {\n  box-sizing: border-box;\n}\n\nbody, html {\n  height: 100%;\n\n  @include typography.body();\n  color: colors.$text;\n\n  background-color: colors.$background;\n}\n\n#map {\n  height: 100%;\n  position: relative;\n\n  @include typography.body();\n\n  .placeholder-text {\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n  }\n\n  // Hide the placeholder text when the map is loaded:\n  &.mapboxgl-map .placeholder-text {\n    display: none;\n  }\n\n  @include controls.mapboxgl-navigation();\n  @include controls.mapboxgl-scale();\n  @include controls.mapboxgl-attribution();\n  @include controls.mapboxgl-popup();\n}\n","@use \"util\";\n@use \"colors\";\n\n@mixin mapboxgl-navigation {\n  .mapboxgl-ctrl-group {\n    border-radius: 0.5rem;\n    background-color: colors.$background;\n\n    // Only put a box shadow on non-empty control groups.\n    &:not(:empty) {\n      @include util.box-shadow();\n    }\n\n    button {\n      margin: 0;\n      border: none;\n\n      color: colors.$text;\n      background-color: colors.$teal;\n\n      // Add a thin top border to every button but the first:\n      & + button {\n        border-top: 0.1rem solid colors.$background;\n      }\n\n      &:hover, &:focus {\n        background-color: colors.$teal--lighter;\n      }\n    }\n\n    // Add rounded corners to first and last items in group.\n    :first-child {\n      border-radius: 0.5rem 0.5rem 0 0;\n    }\n    :last-child {\n      border-radius: 0 0 0.5rem 0.5rem;\n    }\n  }\n}\n\n@mixin mapboxgl-scale {\n  .mapboxgl-ctrl-scale {\n    background-color: colors.$background;\n    color: colors.$text;\n\n    border: 0.1rem solid colors.$background--darker;\n\n    font-size: 0.8rem;\n\n    @include util.box-shadow--lower();\n  }\n}\n\n@mixin mapboxgl-attribution {\n  .mapboxgl-ctrl-attrib {\n    background-color: colors.$background;\n    color: colors.$text;\n\n    font-size: 0.8rem;\n    border-top-left-radius: 0.5rem;\n\n    @include util.box-shadow();\n\n    a {\n      color: colors.$yellow;\n    }\n  }\n}\n\n@mixin mapboxgl-popup {\n  .mapboxgl-popup {\n    // Note that we have to use filter to apply a drop shadow instead of box-shadow.\n    // This is becuase the popup has a triangular top made with the CSS border\n    // triangle trick. box-shadow casts the shadow in a rectangular shape around\n    // the triangle's hidden borders, while filter conforms to the shape of the\n    // one visible border.\n    filter: drop-shadow(2px 2px 4px rgba(0, 0, 0, 0.5));\n\n    // Style the popup's content:\n    &-content {\n      color: colors.$text;\n      background-color: colors.$background;\n      border-radius: 0.5rem;\n      padding: 0.5rem;\n    }\n\n    // Genreate CSS for each possible popup anchor placement to change the color\n    // of the tip.\n    $anchor-tip-border-placement-map: (\n      \"top\": \"bottom\",\n      \"top-left\": \"bottom\",\n      \"top-right\": \"bottom\",\n      \"bottom\": \"top\",\n      \"bottom-left\": \"top\",\n      \"bottom-right\": \"top\",\n      \"left\": \"right\",\n      \"right\": \"left\"\n    );\n\n    @each $anchor-pos, $border-pos in $anchor-tip-border-placement-map {\n      &-anchor-#{$anchor-pos} .mapboxgl-popup-tip {\n        border-#{$border-pos}-color: colors.$background;\n      }\n    }\n  }\n}\n"]}